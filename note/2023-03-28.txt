**** git 사용법
일반 프로젝트를 git 으로 관리하려면
'git init' 사용> .git 폴더 생성됨

git status
modified(빨강) : 변경된 내용을 감지

git add .
변경 내용을 업로드
git status로 확인.modified(초록)

git commit -m "프로젝트 생성"
버전을 만들 준비
git status로 확인. 다시 비어있는것 확인.

git log 로 확인.
---------------------
git hub 에 원격 저장소 생성. (NEW)
이름 설정 후 주소 복사

git remote add origin 원격저장소 주소
---------------------
git pull origin main
---------------------
ctrl + shift + p > git:clone
git 저장소 주소 입력
가져오기 가능
---------------------

**** 1. 커밋 메세지 룰과 작성법
첫번째 라인 : 제목(필수)
두번째 라인 : 공란
세번째 라인부터 : 내용 작성, 무엇을 왜(선택)
마지막 라인 : 꼬리말(#이슈 넘버)(선택)

작성팁 : 최대한 구체적으로 작성, 주간 보고에 그대로 쓸 정도로 작성

**** 2. 왜 굳이 git add -> commit 두 단계에 걸쳐서 하는지?
모든 파일을 굳이 기록할 필요가 없기 때문
버전을 여러개로 나눠서 만들고 싶은 경우
1) git add로 기록할 파일을 고르고
2) git commit으로 버전 생성(기록 완료)

**** 3. 커밋 전에 diff 확인하기! (매우 좋은 습관)
명령어 git diff, git difftool 인데 보기 불편함

**** 4. 커밋은 자주하는게 좋음. 언제, 얼마나 commit을 하는게 좋을까?
간단한 기능을 하나 추가할 때 마다 commit 하면 됨

예를들어 회원가입 기능을 만든다고 하면
- 회원가입 폼 레이아웃 UI를 다 만들면 commit
- 입력한 이메일이 맞는지 검증하는 기능(유효성 검사)을 만들었으면 commit
- 서버에 데이터를 전송하는 기능을 만들었으면 commit

대충 이렇게 작은 작업 하나를 마칠 때 마다 commit 하는게 좋음
물론 3개를 다 만들고 commit 해도 됨
중요한건 하루 1개 이상 커밋 할 것! (좋은 습관)