#새 프로젝트 시작(my-todo)
패키지 설치
npm install styled-components styled-reset react-icons

styled-reset: reset css
react-icons: 리액트에서 다양한 아이콘을 쓸 수 있는 라이브러리
react-icons.github.io/react-icons/
SVG 형태의 아이콘을 리액트 컴포넌트처럼 쉽게 사용
커스텀은 props 또는 CSS 스타일로 변경 가능

* Tip: as를 사용하여 별칭을 붙여 사용하면 추후 아이콘 바꿀때 한곳만 바꾸면 되서 편함!

* 컴포넌트 구조
  App > TodoTemplate > TodoInsert, (TodoList > TodoListItem)
  App( TodoTemplate( TodoInsert, TodoList (TodoListItem) ) )

[App]
 <TodoInsert>
 : 할일 추가 기능 (handleInsert)
 > useCallback()을 사용하여 입력 값 전달
  * 방법1
  > 카피본을 만들어 새로운 배열에 할일 추가(기존 사용 방법)
  * 방법2 (배열의 내장함수 이용)
  > concat()을 사용해 새로운 배열을 반환
  > 함수형 업데이트
    : todos => todos.filter();
    : 이전 state를 매개변수로 받아옴
    : 함수형 업데이트를 쓸 경우 의존성을 제거해 줄 수 있다!

 <TodoList, TodoListItem>
 : 목록 삭제 기능 (handleRemove)
 > useCallback()을 사용하여 입력 값 전달 (삭제를 누른 항목의 id값)
 - 
  * 방법1
  > findIndex()를 이용해 찾은 id값의 인덱스 값을 반환
  > 기존 사용하던 방법. 의존성 배열을 반드시 써야함
  * 방법2
  > 불변성을 지키면서(원본을 변경시키지 않고) 배열의 요소를 제거해야할 때 filter() 활용

 : 체크박스 누를 때 (handleToggle)
 > useCallback()을 사용하여 체크된 값 전달 (체크박스를 누른 항목의 id값)
  * 방법1
  > find()를 이용하여 누른 값의 id를 전달해 target에 저장
  > findIndex()를 이용해 
  > 기존 사용하던 방법. 의존성 배열을 반드시 써야함
  * 방법2
  > 불변성을 유지하면서 배열의 특정 요소를 업데이트 해야할 때 map() 활용
    * 삼항연산자 사용
    todo.id === id ? { ...todo, checked: !todo.checked } : todo
    > true일 때 객체를 반환(기존 배열과 checked 속성을 반대로 바꿈)
    > false일 때 기존의 todo를 반환하여 새로운 배열을 만듦


[TodoTemplate]
 : 화면을 가운데 정렬하고, 앱 타이틀을 보여주는 컴포넌트

[TodoInsert]
 : 새로운 항목을 입력하고 추가할 수 있는 컴포넌트
 > state를 통해 input의 상태를 관리
 - react-icons 사용과 별칭을 이용한 아이콘 사용법(as를 사용하여 별칭을 붙임)

 * (잘 사용하지 않는) form 태그를 사용한 이유
  form 태그 사용시 input에서 엔터키를 눌렀을 때도 submit 이벤트 발생 (todo처럼 input이 하나인 경우 사용하면 편함)

[TodoList]
 : todos 배열을 props로 받아와서 map() 함수를 사용해 여러 개의 TodoListItem 컴포넌트로 변환해 보여줌

[TodoListItem]
 : 각 할 일 항목에 대한 정보를 보여주는 컴포넌트
 > todo 객체를 props로 받아와 상태에 따라 다른 스타일의 UI를 보여줌
 - props로 받아 한번에 구조분해 할당 하는 법

* 일정을 추가/삭제 할 때 추가/삭제된 값만 렌더링 되는 것이 아니라 전체가 렌더링 됨.
  > why? 부모 컴포넌트가 렌더링되면 자식 컴포넌트도 렌더링 되기 때문
  이때 React.memo()를 사용하여 props의 변경이 없을 경우 렌더링을 막아줌
  => useCallback()과 React.memo를 혼합하여 사용함

# pakage 설치
npm install uuid
: id값을 랜덤하게 생성해주는 패키지
> App.js 내에서 uuid 사용

[웹 스토리지]
* <App.js> HTML 웹 스토리지 설명!
* 개발자 도구 > Application > Storege > LocalStorage
 1) window.localStorage - 만료 날짜 없이 데이터를 저장
  활용 예: 장바구니, 아이디 기억하기, 최근 본 상품 등
 2) window.sessionStorage - 한 세션에 대한 데이터 저장(브라우저 탭을 닫으면 데이터가 손실됨)


[추가 개선(새 프로젝트에 적용해도 됨)]
  미입력시 버튼 비활성화 또는 유효성 검사 후 경고 띄우기
  날짜도 같이 기록(디데이 표시)
  할일이 몇개인지 표시(전체, 완료, 미완료)
  완료된 일은 밑으로 내리기
  중요한 일은 핀 고정 버튼 누르면 상위로 올리기
  할일 목록 정렬기능
  테마 적용(다크, 라이트 모드)
  드래그 앤 드랍 적용
  할일 수정 기능