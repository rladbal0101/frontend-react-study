공식 문서로 배우는 리액트_by_goni.kim

#230523
0.2 npm(node package manager)
JS 라이브러리 => Node.js에서는 패키지

1. React
[React]
  : 사용자와 웹사이트의 상호작용을 돋는 UI를 만들기 위한 자바스크립트 기능 모음집
  - 사용자 인터페이스를 만들기 위한 JavaScript 라이브러리
  - React = SPA(Single Page Application) 를 쉽고 빠르게 만들 수 있도록 해주는 도구
1.1 React의 장점
  1) 빠른 업데이트 & 렌더링 속도
  Virtual DOM(가상 돔)과 Real DOM(실제 돔)의 차이 알기!
  - React 방식: DOM을 직접 수정하는 것이 아니라 가상 돔에 먼저 렌더링하고 이전 돔과 비교하여 업데이트 해야할 최소한의 부분만 찾아서 수정(한번의 연산)
  - 기존의 방식: 화면을 업데이트하려면 DOM을 직접 수정 → 성능에 영향(수정할 부분을 DOM에서 모두 찾고 여러 번 연산)
  2) 컴포넌트의 재사용 가능
  - 개발 기간이 단축됨(기존에 개발해 둔 모듈(컴포넌트)을 재사용)
  3) 거대한 생태계와 커뮤니티
  - 메타(페이스북)의 지원 = 지속적인 업데이트
  4) 모바일 앱 개발 가능
1.2 React의 단점
  1) 러닝 커브(진입 장벽)
  - 방대한 학습량
  2) 복잡한 상태 관리
  - 바뀐 부분(state가 바뀐 컴포넌트)만 찾아서 일괄 업데이트 할 때 규모가 큰 앱일수록 복잡함

3. JSX
[JSX] A syntax extension to JavaScript
  : 자바스크립트의 확장 문법으로 JS코드와 HTML코드가 결합된 모습 (JavaScript + XML/HTML)
3.1 JSX의 장점
  - 코드가 간결하여 가독성이 좋음(버그를 발견하기 쉬움)
  - Injection Attacks(해킹방법)을 방어(보안성이 올라감)

  자바스크립트 파일끼리는 import, export 해야함
  컴포넌트를 가져올 때는 자동완성 사용 권장(파일이 열려있어야 자동완성 가능!)

#230524
4. 엘리먼트 렌더링
[엘리먼트(Elements)]
  : 한 번 생성되면 변경할 수 없는 객체(불변성, immutable)
  React 엘리먼트는 DOM 엘리먼트의 가상 표현
  (가상 돔에 그린 후 실제 돔으로 뿌려줌)
4.1 엘리먼트의 특징
  - 불변성(immutable) = 변하지 않는 성질
  - 한번 생성된 엘리먼트는 변하지 않음
    즉, 엘리먼트 생성 후에는 자식이나 속성을 바꿀 수 없음
    예시: 붕어빵 틀(컴포넌트) – 붕어빵(엘리먼트)
  - 기존 엘리먼트를 변경하는 것이 아니라 새로운 엘리먼트를 만들어 기존 엘리먼트와 바꿔치기
4.2 엘리먼트 렌더링하기

5. Component와 Props
  - Component = 레고 블록
    컴포넌트(레고 블록이라고 생각)
      컴포넌트들을 조립한다고 생각하면 됨
      항상 컴포넌트는 리액트 엘리먼트를 리턴해야함
      리액트 엘리먼트는 화면에 보여지는 것들을 반환
  - Props = 부모가 자식한테 (객체 형태로) 전달하는 값

[Component]
  : 반복되는 부분을 컴포넌트로 만들어 재사용(무분별하게 쪼갤 필요 없음)
5.1.1 컴포넌트 만들기
- 종류: 함수 컴포넌트, 클래스 컴포넌트

• 클래스 컴포넌트(거의 사용x)
  ES6의 클래스를 사용하여 만들어진 컴포넌트
  React 초기 버전에서 주로 사용
  사용하기 불편함 → 함수 컴포넌트 + 훅(Hook)으로 대체
• 함수 컴포넌트(권장)
  자바스크립트 함수 형태로 된 컴포넌트
  코드가 간결해지고 사용하기 편함

  - 컴포넌트 이름: 항상 대문자로 시작(소문자로 작성하면 HTML div 태그로 인식하기 때문!)
5.1.2 컴포넌트 합성, 추출


[Props] @ 예제 chapter5
  : Property의 줄임으로 React 컴포넌트의 속성들을 의미
  - React 컴포넌트가 엘리먼트를 생성하기 위해 사용하는 값
    예시: 붕어빵 틀(컴포넌트) → 재료: 팥, 슈크림 등(Props) → 팥 붕어빵, 슈크림 붕어빵(엘리먼트)
5.2 Props의 특징
  Read-Only 읽기 전용 = 값을 변경 할 수 없다.
  모든 React 컴포넌트는 자신의 props를 다룰 때 반드시 순수 함수처럼 동작해야 한다.

#230525
6. State와 Lifecycle
  State: 화면이 바뀌어야 할 때 state를 변경
  Lifecycle: 클래스 컴포넌트와 밀접, 개념만 알기

[★ State]
  : React 컴포넌트의 상태 → React 컴포넌트의 "변경 가능한 데이터!"
    컴포넌트에서 보여줘야 하는 내용이 사용자 인터랙션에 따라 동적으로 바뀌어야 할 때 사용
  - ☆ 렌더링과 관련된 값만 state에 포함시켜야 함
    (변경될 값이 없는데 state에 넣어두면 불필요한 렌더링이 되기때문에 성능이 저하될 수 있음)
  - 직접적으로 변경하면 안됨(값은 변경되지만 재렌더링 되지 않음)
  - 함수 컴포넌트
    → useState() Hook을 사용하여 각각의 state를 정의하고 각 state별로 주어지는 set함수를 사용하여 state값을 변경해야함

[Lifecycle] @ 예제 chapter6 (클래스 컴포넌트 사용)
  : React 컴포넌트의 생명주기 : Mounting -> Updating -> Unmounting
  6.1 Mounting
  : 컴포넌트가 생성될 때(화면에 나타날 때)
  - constructor() 호출
  - render() 호출
  - componentDidMount() 호출
    : 컴포넌트가 마운트(생성될 때) 된 이후 호출
  6.2 Updating
  : 컴포넌트가 업데이트 될 때(화면이 바뀔 때)
  - 업데이트가 일어나는 조건?
    New props: 컴포넌트의 props가 전달될 때
    setState() 함수 호출에 의해 state가 변경될 떄
    forceUpdate() 강제 렌더링(개발할때 잘 안씀)
  - render() 호출
  - componentDidUpdate() 호출
    : 컴포넌트가 업데이트 된 이후 호출
  6.3 Unmounting
  : 컴포넌트가 제거될 때(화면에서 사라질 때)
  - componentWillUnmount() 호출
    : 컴포넌트가 언마운트 되기 직전 호출

7. Hook
[Hook]
  : Class없이 React기능들을 사용하게 해줌
  함수 컴포넌트에서 React state와 생명주기기능을 연동할수있게 해주는 암수
  (대표적인 Hook: useState(), useEffect())
  
  7.1 useState()   @ 예제 chapter7 7.2
  : state를 생성하고 변경하기 위한 Hook
  - const [변수명, set함수명] = useState(초기값); // 배열의 구조분해 할당
  - 변수 각각에 대해 set 함수가 따로 존재함
  ※ state 값을 변경하려면 무조건 set함수를 이용!
    일반적으로 작명은 변수명(예: test), set함수명(setTest) 형식으로 사용함!

  ※ ☆setState()는 비동기 함수! @ 예제 chapter7 7.2 SetStateMerge
    => 결과를 기다리지 않고 넘어가기 때문에 (앞에 함수가 아무리 많아도) 마지막 함수만 실행되는 것처럼 보임
    > 비동기 함수를 동기적으로 되게하려면 콜백함수로 변경!
    - JSX 내부에서는 if문을 사용할 수 없으므로 삼항 연산자를 이용!

  7.2 useEffect()   @ 예제 chapter7 7.3 ex1 CounterEffect
  : 마운트/업데이트/언마운트 시 할 작업 설정(Lifecycle methods를 대체해줌)
    componentDidMount()
    componentDidUpdate()
    componentWillUnmount()
  => useEffect() 하나로 대체가능

  [정리]
  useEffect()를 쓰는 경우?
  - useEffect() 안에 콜백 함수는 HTML 렌더링 후에 동작함 => 연산이 오래걸리는 작업들을 넣으면 좋음
  - 아니면 주로 처음 렌더링시 해줘야 하는 초기 작업들
  1) 에러가 떠서 페이지를 백 시켜야 할 때
  2) 마운트 됐을 때 그 페이지를 이용할 수 있는 사용자인지 권한 체크할 때
  3) 타이머 동작 시킬때
  4) 주로 데이터 페치 관련 작업을 많이 넣음 (데이터를 가져오는 작업들.. 가장 많이 사용)

  #230526
  - useEffect()함수 연습
    useEffect()도 마찬가지로 하나의 컴포넌트에서 여러 개 사용 가능
  @ 예제 chapter7 7.3 ex2 FriendStatusWithCounterEx
    - clean-up함수, 멀티 state, 멀티 effect
  @ 예제 chapter7 7.3 ex3 EffectSummary
    - 의존성 배열에 따른 실행 예제
  @ 예제 chapter7 7.3 ex4 Timer
    - 의존성 배열(빈배열)을 활용한 타이머 예제
☆ Tip! 윈도우즈 이모지 단축키: 윈도우키 + 마침표(.)

8. 이벤트 처리하기
HTML 형식
  <button onclick="activateLasers">
    Activate Lasers
  </button>
React 에서는?
  <button onClick={activateLasers}> // 함수명 뒤에 () 하게될 경우엔 함수가 호출됨
    Activate Lasers
  </button>
  => 인자값을 넣고 싶을땐? onClick = {() => {activateLasers(인자값)}}

  @ 예제 chapter8 8.2 MyButton
    - e(e.target): 이벤트 객체 사용
    ※ debugger;
    e.target 밑에 어떤 기능이 있는지 확인하려면 debugger 써서 확인하면 됨. 개발자 도구에서 확인가능 debugger 실행 'F10'으로 이동가능 

9. 조건부 렌더링
  : 조건에 따라 렌더링의 결과가 달라지도록 하는 것
  @ 예제 chapter9 9.1, 9.2 로그인여부에 따라 인사말 다르게

#230530
[조건부 렌더링]  @ 예제 chapter9 9.3 LoginControlRefactoring 삼항연산자를 이용한 조건부 렌더링 예제, Mailbox, 9.4
JSX 내부에서의 조건부 렌더링
- reutrn(); 안의 JSX 내에서는 if문 사용 불가함

- if문 => 논리 && 연산자를 사용☆
  && 뒤의 엘리먼트는 조건이 true일때 출력, 조건이 false라면 무시하고 건너뜀
- if-Else 구문 => 삼항 연산자 사용☆
  조건 ? '값or표현식' : '값or표현식'

  [정리]
  논리 연산자(&&)와 삼항 연산자(? :)를 이용한 조건부 렌더링은 매우 많이 쓰임
  동적인 UI 만드는 3 step
  1. HTML/CSS로 미리 마크업/디자인 완성
  2. UI 현재 상태를 state로 저장
  3. 조건문으로 state에 따라 UI가 어떻게 보일지 작성

10. 리스트와 Key   @ 예제 chapter10
[리스트]
  : 같은 아이템을 순서대로 모아놓은 것, 리스트를 담는 자료구조 -> 배열
[Key]
  : 리스트의 아이템을 구분하기 위한 고유의 값or표현식
  어떤 아이템이 추가, 변경, 삭제 되었는지 구분하기 위해 사용
  ☆데이터의 id를 사용(주로 사용)

  @ 예제 chapter10 10.1
  - 배열을 사용하여 반복되는 여러개의 컴포넌트들을 쉽게 렌더링 가능
  - 배열의 map()함수 사용
  - map(): 배열의 각 요소에 어떤 처리를 한 뒤 리턴(return 필수)하는 것으로 새로운 배열을 만듦
  - 어떤 처리? 리액트 엘리먼트로 만들기
  - map() 함수 안에 있는 엘리먼트에는 무조건 Key가 있어야 함

  @ 예제 chapter10 10.2 리스트에 항목 추가하기
  - Key값이 없는 경우 전체가 업데이트 됨(DOM 확인)
    => 고유한 Key값을 넣어줘야 함(id값을 주는게 가장 좋음!)
  - index 값도 전체가 업데이트 될수 있으므로 지양해야 함
    why? => 추가하는 값이 앞쪽에 추가되면 index 값이 밀리기 때문!

  @ 예제 chapter10 AttendanceBook
  
#230531
11. From
  : 사용자로부터 입력을 받기 위해 사용하는 것(입력 양식 - 대표적으로 <input>)
  : 입력된 값을 state로 가지고 있다가 화면에 뿌려서 관리

  - 제어 컴포넌트
    : 사용자가 입력한 값에 접근하고 제어힐 수 있도록 해주는 컴포넌트(state로 통제함)
  @ 예제 chapter11 NameForm, EssayForm - 입력된 값을 state로 가지고 있다가 화면에 뿌려서 관리하는 예제

7장
7.3 useRef()
: 레퍼런스를 사용하기 위한 Hook
: 렌더링 될 때마다 항상 같은 레퍼런스 객체를 반환 -> 반환된 객체는 컴포넌트의 전 생애주기에 걸쳐서 유지됨(유지가 되는게 특징!)
- 사용법
  • const 변수명 = useRef(초기값);
  => 변수명.current 속성을 통해 접근
  : 부득이하게 특정 DOM을 선택해야하는 경우 사용 @ 예제 chapter7 7.6 TextInputWithFocusButton
  : 변수로 사용할 경우 @ 예제 chapter7 7.6 ComponentVariable

 - state는 무조건 렌더링됨!

[From]
@ 예제 chapter11 11.4 ReservationRefactoring☆
  state에 객체를 넣었을 때는 사용법이 다름
  ★ React에서 객체를 수정해야 할 때에는 기존 상태를 직접 수정해서 set함수에 넣으면 안됨
  => React에서 객체를 업데이트 할 때에는 기존 객체를 직접 수정하면 안되고 새로운 객체(기존 객체의 복사본(스프레드 연산자 이용))를 만들어서 그 객체에 변화를 주고 마지막으로 set함수에 넣어줘야 함

#230601
11.5 Form - Input Null
  값이 비어 있음을 나타낼 때 value 속성에 null값 사용은 안됨
  빈문자('')를 사용  // 예) value={name||''}
  ※교재(잘못됨)말고 강의 자료 참고하기

#새 프로젝트 시작(my-post)

#230602
12. State 끌어올리기
  : 여러 개의 컴포넌트들 사이에서 state를 공유하려면..?
    > 공통된 부모 컴포넌트로 끌어올려서 공유하는 방식
  - React에서 일반적으로 데이터는 위에서 아래로 props를 통해 전달
    동일선상이나 부모 컴포넌트에는 state공유가 되지 않음
    => 따라서 공유하려는 컴포넌트들의 부모 컴포넌트에 state를 만들어 하위 컴포넌트에서 같은 데이터를 사용!

  @ 예제 chapter12 UnitCalculator
  -> 주의! number input이어도 문자가 입력되므로(state확인해보기) Number()를 이용해  숫자로 바꿔줘야 함
  
13. 합성(Composition)
  : props에 기본적으로 들어있는 children 속성을 사용
  - 컴포넌트를 넘겨줄때 하위 엘리먼트들을 따로 넘겨주지 않아도 자동으로 props로 들어가 있음. 이 때 children 속성을 사용! => children 이라는 이름의 props로 전달됨

  @ 예제 chapter13 13.1.1.1 WelcomeDialog - 우주선 예제
  @ 예제 chapter13 13.1.1.2 SplitPaneSection - 화면 분할 예제
  - children 속성을 쓰거나, 그게 싫다면 별도의 props를 정의해서 원하는 컴포넌트(엘리먼트)를 넣어서 사용!
  @ 예제 chapter13 13.1.2 DialogContainer - 이전 예제(WelcomeDialog) 리팩토링
  @ 예제 chapter13 13.1.3 SignUpDialog - 주로 공통 모달창 만들 때 사용됨

14. 컨텍스트(Context)
  : 일일이 props를 넘겨주지 않고도 컴포넌트 트리 전체에 데이터를 제공 가능
  - 일반적인 React 앱에서 데이터는 위에서 아래로(부모로부터 자식에게) props를 통해 전달
  - context를 이용하면, 트리 단계마다 명시적으로 props를 넘겨주지 않아도 많은 컴포넌트가 이러한 값을 공유하도록 할 수 있음
  • How? Broadcast! - 계속 방송을 해주고 있다고 생각
  - 사용법?
    : Provider/Consumer 를 이용하여 사용함
     -> Provider는 반드시 value 값을 사용
     -> Consumer는 매개변수를 사용하여 값을 받아서 사용함
     @ 예제 chapter14 14.2 ContextEx 참고

  Context API의 한계(단점)?
  1. 여러 개의 데이터를 전역으로 사용하려면 컨텍스트(프로바이더, 컨슈머)를 여러개 만들어야 됨
  2. value 값이 바뀌면 프로바이더의 하위 컨슈머 컴포넌트가 전부 다 재렌더링 됨
  3. Context를 사용하면 컴포넌트를 재사용하기 어려워 질 수 있음

  - 실무에서 잘 사용안함 -> 보통 "Redux"라는 전역상태 라이브러리 사용(면접에 나올수 있으니 알고 넘어가기!)

  @ 예제 14 DarkOrLight - 테마 변경(다크/라이트)

#230605
15. styled-components
  : CSS in JS(JS 안에서 CSS 사용할 수 있는 기술)
  : CSS 문법을 그대로 사용하면서 결과물을 스타일링 된 컴포넌트 형태로 만들어주는 라이브러리
  - 컴포넌트 개념을 사용하기 때문에 리액트랑 궁합이 잘맞음
  - 백틱을 사용하여 구성 요소의 스타일을 지정(vscode-styled-components 익스텐션 설치 필요!)

  @ 예제 chapter15 StyledPage 참고!
  0. styled-components 설치하기
  * npm을 사용하는 경우
  npm install styled-components
  (npm install styled-components@5.3.11)-최신버전 에러로 인해 직전 버전 설치
  (설치 확인해보려면 package.json 확인)

  @ 예제 chapter15 theme
  styled-components의 theme Provider를 통해 지정해놓은 값을 가져와 사용할 수 있음

7장
7.5 useCallback()
  : 값이 아닌 함수를 반환함
    최적화와 관련된 Hook
  • 사용법
    - const 함수명 = useCallback(콜백 함수, 의존성 배열);
    - const 함수명 = useCallback(() => {}, []);
    - 의존성 배열에 들어있는 변수가 변했을 경우에만 콜백 함수를 다시 정의해서 리턴함

  useCallback() 안에 넣으면 컴포넌트가 마운트 될 때 한번만 함수가 정의됨
  - memoization: 자주 사용되는 것을 메모리에 정의해두고 필요할 때 꺼내 쓰는 것
  - props로 전달해야 할 함수를 만들 때는 useCallback()을 사용해본다!
  - ☆★(중요) 리액트에서는 기본적으로 부모 컴포넌트가 렌더링되면 모든 자식 컴포넌트들도 무조건 렌더링 된다!
  - 이 때 React.memo()를 사용하면 props의 변경이 없을 경우 렌더링을 막아준다. (useCallback()과 React.memo(); 함께 사용)
  ! 상위 컴포넌트에서 전달하는 함수에 useCallback()을 쓰면 props로 전달되는 함수가 새로 정의되지 않기때문에 props의 변경이 없으므로 재렌더링 발생 안함
  
  * React.memo가 필요할 때?
  1) 컴포넌트가 같은 props로 자주 렌더링 될 때
  2) 컴포넌트가 렌더링 될 때마다 복잡한 로직(연산)을 처리해야 할 때 (props의 변경이 있으면 당연히 렌더링되어야 함)

#새 프로젝트 시작(my-todo)
패키지 설치
npm install styled-components styled-reset react-icons

#230607
16. react-router-dom
 : 리액트를 위한 라우팅 라이브러리

<MainPage>
[Link 컴포넌트]
* a태그 역할의 Link 컴포넌트
 > a태그를 직접사용하면 새로고침을 하기 때문에 Link 컴포넌트를 사용!
 > 차이점?
  : a태그의 기본 동작은 페이지를 이동시키면서, 페이지를 아예 새로 불러옴(새로고침)
    그렇게되면 리액트 앱이 지니고 있는 상태들도 초기화되고,
    렌더링된 컴포넌트도 모두 사라지고 새로 렌더링을 하게됨(언마운트 -> 마운트)
    Link 컴포넌트는 새로고침을 막음

<SimpleRouter>
[Nested Route 방식] ☆
  <Route> 안에 <Route> 사용 가능
  단! 태그를 닫으면 안되고 태그 안에 태그로(<Route><Route></Route></Route>)
  > 부모 안에 자식들을 렌더링해 보여줌
  > 어디에 보여줄지는 부모안에서 Outlet 컴포넌트로 지정 (GamePage의 Outlet 확인!)
  - Nested 안에 또 Nested 가능 
  - 활용 예: 헤더, 푸터 사이에 메인 영역 등

[URL 파라미터와 쿼리스트링]
  URL 파라미터는 주소의 경로에 유동적인 값을 넣는 형태고, 
  쿼리스트링은 주소의 뒷부분에 ? 문자열 이후에 key=value 로 값을 정의하며 & 로 구분을 하는 형태

  주로 URL 파라미터는 ID 또는 이름을 사용하여 특정 데이터를 조회할 때 사용하고, 
  쿼리스트링(Querystring)은 키워드 검색, 페이지네이션, 정렬 방식 등 데이터 조회에 필요한 옵션을 전달할 때 사용 
  (꼭 위와 같이 쓰라고 정해진 규칙이 있는것은 아님)

  URL 파라미터 예시: https://vibe.naver.com/album/9732422 (네이버 바이브)
  (9732422는 id값(id값은 ))
  쿼리스트링 예시: /articles?**page=1&keyword=react (네이버 검색)
                          ? 물음표로 시작
<AboutPage>
: 쿼리스트링 사용 페이지
- {location.search} (예전 내용 참고 4_3_bom.html > 2) location 객체 > 쿼리스트링)
 : 이 문자열 앞에 있는 ?를 지우고, &로 분리한뒤 key와 value를 파싱하는 작업이 필요했는데 현재는 useSearchParams() 훅을 이용하여 간편하게 작업

<NoMatchPage>
 : 설정한 라우팅 경로 이외에 경우 보여줄 페이지 경로 => *
  <Route path='*' /> // *의 의미는 match anything

#230608
#새 프로젝트 시작(my-blog)
  note.md 참고

[export와 export default의 차이]
- export:
  파일 1개에서 여러번 사용 가능
  import시 {}로 받아와야 하고 네임이 일치해야 됨
- export default:
  파일 1개당 하나만 사용 가능
  import시 변수명을 내가 지을 수 있다.

* 모던 JavaScript 튜토리얼에서 깊이 있는 공부 가능(https://ko.javascript.info/)