공식 문서로 배우는 리액트_by_goni.kim

#230523
0.2 npm(node package manager)
JS 라이브러리 => Node.js에서는 패키지

1. React
[React]
  : 사용자와 웹사이트의 상호작용을 돋는 UI를 만들기 위한 자바스크립트 기능 모음집
  - 사용자 인터페이스를 만들기 위한 JavaScript 라이브러리
  - React = SPA(Single Page Application) 를 쉽고 빠르게 만들 수 있도록 해주는 도구
1. React의 장점
  1) 빠른 업데이트 & 렌더링 속도
  Virtual DOM(가상 돔)과 Real DOM(실제 돔)의 차이 알기!
  - React 방식: DOM을 직접 수정하는 것이 아니라 가상 돔에 먼저 렌더링하고 이전 돔과 비교하여 업데이트 해야할 최소한의 부분만 찾아서 수정(한번의 연산)
  - 기존의 방식: 화면을 업데이트하려면 DOM을 직접 수정 → 성능에 영향(수정할 부분을 DOM에서 모두 찾고 여러 번 연산)
  2) 컴포넌트의 재사용 가능
  - 개발 기간이 단축됨(기존에 개발해 둔 모듈(컴포넌트)을 재사용)
  3) 거대한 생태계와 커뮤니티
  - 메타(페이스북)의 지원 = 지속적인 업데이트
  4) 모바일 앱 개발 가능
2. React의 단점
  1) 러닝 커브(진입 장벽)
  - 방대한 학습량
  2) 복잡한 상태 관리
  - 바뀐 부분(state가 바뀐 컴포넌트)만 찾아서 일괄 업데이트 할 때 규모가 큰 앱일수록 복잡함

3. JSX
[JSX] A syntax extension to JavaScript
  : 자바스크립트의 확장 문법으로 JS코드와 HTML코드가 결합된 모습 (JavaScript + XML/HTML)
1. JSX의 장점
  - 코드가 간결하여 가독성이 좋음(버그를 발견하기 쉬움)
  - Injection Attacks(해킹방법)을 방어(보안성이 올라감)

  자바스크립트 파일끼리는 import, export 해야함
  컴포넌트를 가져올 때는 자동완성 사용 권장(파일이 열려있어야 자동완성 가능!)

#230524
4. 엘리먼트 렌더링
[엘리먼트(Elements)]
  : 한 번 생성되면 변경할 수 없는 객체(불변성, immutable)
  React 엘리먼트는 DOM 엘리먼트의 가상 표현
  (가상 돔에 그린 후 실제 돔으로 뿌려줌)
1. 엘리먼트의 특징
  - 불변성(immutable) = 변하지 않는 성질
  - 한번 생성된 엘리먼트는 변하지 않음
    즉, 엘리먼트 생성 후에는 자식이나 속성을 바꿀 수 없음
    예시: 붕어빵 틀(컴포넌트) – 붕어빵(엘리먼트)
  - 기존 엘리먼트를 변경하는 것이 아니라 새로운 엘리먼트를 만들어 기존 엘리먼트와 바꿔치기
2. 엘리먼트 렌더링하기

5. Component와 Props
  - Component = 레고 블록
    컴포넌트(레고 블록이라고 생각)
      컴포넌트들을 조립한다고 생각하면 됨
      항상 컴포넌트는 리액트 엘리먼트를 리턴해야함
      리액트 엘리먼트는 화면에 보여지는 것들을 반환
  - Props = 부모가 자식한테 (객체 형태로) 전달하는 값

[Component]
  : 반복되는 부분을 컴포넌트로 만들어 재사용(무분별하게 쪼갤 필요 없음)
1. 컴포넌트 만들기
- 종류: 함수 컴포넌트, 클래스 컴포넌트

• 클래스 컴포넌트(거의 사용x)
  ES6의 클래스를 사용하여 만들어진 컴포넌트
  React 초기 버전에서 주로 사용
  사용하기 불편함 → 함수 컴포넌트 + 훅(Hook)으로 대체
• 함수 컴포넌트(권장)
  자바스크립트 함수 형태로 된 컴포넌트
  코드가 간결해지고 사용하기 편함

  - 컴포넌트 이름: 항상 대문자로 시작(소문자로 작성하면 HTML div 태그로 인식하기 때문!)
2. 컴포넌트 합성, 추출


[Props]
  : Property의 줄임으로 React 컴포넌트의 속성들을 의미
  - React 컴포넌트가 엘리먼트를 생성하기 위해 사용하는 값
    예시: 붕어빵 틀(컴포넌트) → 재료: 팥, 슈크림 등(Props) → 팥 붕어빵, 슈크림 붕어빵(엘리먼트)
1. Props의 특징
  Read-Only 읽기 전용 = 값을 변경 할 수 없다.
  모든 React 컴포넌트는 자신의 props를 다룰 때 반드시 순수 함수처럼 동작해야 한다.

#230525
6. State와 Lifecycle
  State: 화면이 바뀌어야 할 때 state를 변경
  Lifecycle: 클래스 컴포넌트와 밀접, 개념만 알기

[★ State]
  : React 컴포넌트의 상태 → React 컴포넌트의 "변경 가능한 데이터!"
    컴포넌트에서 보여줘야 하는 내용이 사용자 인터랙션에 따라 동적으로 바뀌어야 할 때 사용
  - ☆ 렌더링과 관련된 값만 state에 포함시켜야 함
    (변경될 값이 없는데 state에 넣어두면 불필요한 렌더링이 되기때문에 성능이 저하될 수 있음)
  - 직접적으로 변경하면 안됨(값은 변경되지만 재렌더링 되지 않음)
  - 함수 컴포넌트
    → useState() Hook을 사용하여 각각의 state를 정의하고 각 state별로 주어지는 set함수를 사용하여 state값을 변경해야함

[Lifecycle] @ 예제 chapter6 Notification/NotificationList(클래스 컴포넌트)
  : React 컴포넌트의 생명주기 : Mounting -> Updating -> Unmounting
  1. Mounting
  : 컴포넌트가 생성될 때(화면에 나타날 때)
  - constructor() 호출
  - render() 호출
  - componentDidMount() 호출
    : 컴포넌트가 마운트(생성될 때) 된 이후 호출
  2. Updating
  : 컴포넌트가 업데이트 될 때(화면이 바뀔 때)
  - 업데이트가 일어나는 조건?
    New props: 컴포넌트의 props가 전달될 때
    setState() 함수 호출에 의해 state가 변경될 떄
    forceUpdate() 강제 렌더링(개발할때 잘 안씀)
  - render() 호출
  - componentDidUpdate() 호출
    : 컴포넌트가 업데이트 된 이후 호출
  3. Unmounting
  : 컴포넌트가 제거될 때(화면에서 사라질 때)
  - componentWillUnmount() 호출
    : 컴포넌트가 언마운트 되기 직전 호출

7. Hook
[Hook]
  : Class없이 React기능들을 사용하게 해줌
  함수 컴포넌트에서 React state와 생명주기기능을 연동할수있게 해주는 암수
  (대표적인 Hook: useState(), useEffect())
  
1. useState()   @ 예제 chapter7 7.2 Counter/SetStateMerge
  : state를 생성하고 변경하기 위한 Hook
  - const [변수명, set함수명] = useState(초기값); // 배열의 구조분해 할당
  - 변수 각각에 대해 set 함수가 따로 존재함
  ※ state 값을 변경하려면 무조건 set함수를 이용!
    일반적으로 작명은 변수명(예: test), set함수명(setTest) 형식으로 사용함!

  ※ ☆setState()는 비동기 함수! @ 예제 chapter7 7.2 SetStateMerge
    => 결과를 기다리지 않고 넘어가기 때문에 (앞에 함수가 아무리 많아도) 마지막 함수만 실행되는 것처럼 보임
    > 비동기 함수를 동기적으로 되게하려면 콜백함수로 변경!
    - JSX 내부에서는 if문을 사용할 수 없으므로 삼항 연산자를 이용!

2. useEffect()   @ 예제 chapter7 7.3 ex1 CounterEffect
  : 마운트/업데이트/언마운트 시 할 작업 설정(Lifecycle methods를 대체해줌)
    componentDidMount()
    componentDidUpdate()
    componentWillUnmount()
  => useEffect() 하나로 대체가능

  [정리]
  useEffect()를 쓰는 경우?
  - useEffect() 안에 콜백 함수는 HTML 렌더링 후에 동작함 => 연산이 오래걸리는 작업들을 넣으면 좋음
  - 아니면 주로 처음 렌더링시 해줘야 하는 초기 작업들
  1) 에러가 떠서 페이지를 백 시켜야 할 때
  2) 마운트 됐을 때 그 페이지를 이용할 수 있는 사용자인지 권한 체크할 때
  3) 타이머 동작 시킬때
  4) 주로 데이터 페치 관련 작업을 많이 넣음 (데이터를 가져오는 작업들.. 가장 많이 사용)

  #230526
  - useEffect()함수 연습
    useEffect()도 마찬가지로 하나의 컴포넌트에서 여러 개 사용 가능
  @ 예제 chapter7 7.3 ex2 FriendStatusWithCounterEx
    - clean-up함수, 멀티 state, 멀티 effect
  @ 예제 chapter7 7.3 ex3 EffectSummary
    - 의존성 배열에 따른 실행 예제
  @ 예제 chapter7 7.3 ex4 Timer
    - 의존성 배열(빈배열)을 활용한 타이머 예제
☆ Tip! 윈도우즈 이모지 단축키: 윈도우키 + 마침표(.)

8. 이벤트 처리하기
HTML 형식
  <button onclick="activateLasers">
    Activate Lasers
  </button>
React 에서는?
  <button onClick={activateLasers}> // 함수명 뒤에 () 하게될 경우엔 함수가 호출됨
    Activate Lasers
  </button>
  => 인자값을 넣고 싶을땐? onClick = {() => {activateLasers(인자값)}}

  @ 예제 chapter8 8.2 MyButton
    - e(e.target): 이벤트 객체 사용
    ※ debugger;
    e.target 밑에 어떤 기능이 있는지 확인하려면 debugger 써서 확인하면 됨. 개발자 도구에서 확인가능 debugger 실행 'F10'으로 이동가능 

9. 조건부 렌더링
  : 조건에 따라 렌더링의 결과가 달라지도록 하는 것
  
