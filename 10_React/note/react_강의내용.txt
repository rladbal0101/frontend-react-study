공식 문서로 배우는 리액트_by_goni.kim

#230523
0.2 npm(node package manager)
JS 라이브러리 => Node.js에서는 패키지

1. React 소개
1.1 React는 무엇인가?
  - 사용자 인터페이스를 만들기 위한 JavaScript 라이브러리
  - React = SPA 를 쉽고 빠르게 만들 수 있도록 해주는 도구
  - SPA(Single Page Application)
1.2 React의 장점
  1) 빠른 업데이트 & 렌더링 속도
  - Virtual DOM(가상 돔)과 Real DOM(실제 돔)의 차이 알기!
  • 기존의 방식: 화면을 업데이트하려면 DOM을 직접 수정 → 성능에 영향(수정할 부분을 DOM에서 모두 찾고 여러 번 연산)
  • React 방식: DOM을 직접 수정하는 것이 아니라 가상 돔에 먼저 렌더링하고 이전 돔과 비교하여 업데이트 해야할 최소한의 부분만 찾아서 수정(한번의 연산)
  2) 컴포넌트 구조
  3) 재사용성(다시 사용이 가능한 성질)
  - 개발 기간이 단축됨
  - 기존에 개발해 둔 모듈(컴포넌트)을 재사용
  4) 거대한 생태계와 커뮤니티
  - 메타(페이스북)의 지원 = 지속적인 업데이트
  5) 모바일 앱 개발 가능
1.3 React의 단점
  1) 러닝 커브(진입 장벽)
  - 방대한 학습량
  2) 복잡한 상태 관리
  - state라는 중요한 개념!!

#230524
4. 엘리먼트 렌더링
4.1 엘리먼트(Elements)란?
  한 번 생성되면 변경할 수 없는 객체(불변성, immutable)
  React 엘리먼트는 DOM 엘리먼트의 가상 표현
  (가상 돔에 그린 후 실제 돔으로 뿌려줌)
4.2 엘리먼트의 특징
  - 불변성(immutable) = 변하지 않는 성질
  - 한번 생성된 엘리먼트는 변하지 않음
    즉, 엘리먼트 생성 후에는 자식이나 속성을 바꿀 수 없음
    예시: 붕어빵 틀(컴포넌트) – 붕어빵(엘리먼트)
  - 기존 엘리먼트를 변경하는 것이 아니라 새로운 엘리먼트를 만들어 기존 엘리먼트와 바꿔치기
4.3 엘리먼트 렌더링하기

5. Component와 Props
  Component = 레고 블록
  Props = 부모가 자식한테 (객체 형태로) 전달하는 값
5.1 컴포넌트(Component)란?
  반복되는 부분을 컴포넌트로 만들어 재사용(무분별하게 쪼갤 필요 없음)
5.2 Props란?
  Property의 줄임으로 React 컴포넌트의 속성들을 의미
  - React 컴포넌트가 엘리먼트를 생성하기 위해 사용하는 값
    예시: 붕어빵 틀(컴포넌트) → 재료: 팥, 슈크림 등(Props) → 팥 붕어빵, 슈크림 붕어빵(엘리먼트)
5.3 Props의 특징
  Read-Only 읽기 전용 = 값을 변경 할 수 없다.
  모든 React 컴포넌트는 자신의 props를 다룰 때 반드시 순수 함수처럼 동작해야 한다.
5.4 컴포넌트 만들기
- 종류: 함수 컴포넌트, 클래스 컴포넌트
• 클래스 컴포넌트
  ES6의 클래스를 사용하여 만들어진 컴포넌트
  React 초기 버전에서 주로 사용
  사용하기 불편함 → 함수 컴포넌트 + 훅(Hook)으로 대체
• 함수 컴포넌트(권장)
  자바스크립트 함수 형태로 된 컴포넌트
  코드가 간결해지고 사용하기 편함

  - 컴포넌트 이름: 항상 대문자로 시작(소문자로 작성하면 HTML div 태그로 인식하기 때문)